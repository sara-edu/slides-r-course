---
format: 
  revealjs:
    theme: [default, sara-style.scss]
knitr:
  opts_chunk: 
    echo: true
---

#  {background-image="images/exploder.gif" background-position="center" background-size="contain" .inverse}

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

::: aside
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::

## R programming language

<br> <br>

::: columns
::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1920px-R_logo.svg.png)
:::

::: {.column width="70%"}
<br> <br>

"R is a free software environment for statistical computing and graphics."[^1]
:::
:::

[^1]: [Source: R for Data Science, 2e](https://r4ds.hadley.nz/intro)

## R's History

::: nonincremental
-   Initially developed as **S** language by Bells Labs.

-   First appeared in August 1993 as **R** language by:
:::

::: columns
::: {.column width="50%"}
`Ross Ihaka`<br>(New Zealand Statistician)

![](https://cdn.auckland.ac.nz/aem/content/auckland/en/science/about-the-faculty/department-of-statistics/ihaka-lecture-series/_jcr_content/leftpar/imagecomponent/image.img.480.low.jpg/1561079330278.jpg)
:::

::: {.column width="50%"}
`Robert Gentleman`<br>(Canadian Statistician)

![](https://www.computerhope.com/people/pictures/robert_gentleman.jpg){width="350"}
:::
:::

## R is FREE

[Download](https://cran.r-project.org/mirrors.html) R from CRAN

![](images/cran.png)

## R console

::: columns
::: {.column width="50%"}
<br>

-   R version 4.3.1 (2023-06-16)

-   R name "Beagle Scouts"

-   R licence "ABSOLUTELY NO WARRANTY"

-   R prompt `>|`
:::

::: {.column width="50%"}
![](images/r-console.png){height="650" width="500"}
:::
:::

## Don't save workspace image

::: columns
::: {.column width="50%"}
<br>

-   It helps in "freshly minted R sessions".

-   "put more trust in your script than in your memory".
:::

::: {.column width="50%"}
![](images/r-close.png){height="650" width="500"}
:::
:::

::: aside
[Source: R Bloggers](https://www.r-bloggers.com/2017/04/using-r-dont-save-your-workspace/)
:::

#  {.inverse}

[operators]{.r-fit-text}

## Operators

> "Operators are used to perform operations on variables and values."

<br>

`12 + 3` in this code `+` is an operator.

<br>

::: {.callout-tip}
Put spaces between and around operators (`=+-*/`)
:::

::: aside
Source: [w3schools](https://www.w3schools.com/r/r_operators.asp)
:::

<!-- ## Types of R Operators: -->

<!-- -   Arithmetic operators -->
<!-- -   Assignment operators -->
<!-- -   Comparison operators -->
<!-- -   Logical operators -->
<!-- -   Miscellaneous operators -->

## R arithmetic operators

Arithmetic operators are used with numeric values to perform common mathematical operations:

<br>

| Operator | Name           | Example |
|----------|----------------|---------|
| `+`      | Addition       | x + y   |
| `-`      | Subtraction    | x - y   |
| `*`      | Multiplication | x \* y  |
| `/`      | Division       | x / y   |
| `^`      | Exponent       | x \^ y  |

## R console {.centering}

<br>

::: columns
::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: number
#| eval: false
7
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: number
#| echo: false
#| output: asis
```
:::
:::

## R console: Addition {.centering}

<br>

::: columns
::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: add
#| eval: false
2 + 1
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: add
#| echo: false
#| output: asis
```
:::
:::

## R console: Subtraction {.centering}

<br>

::: columns

::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: subtract
#| eval: false
10 - 2
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: subtract
#| echo: false
#| output: asis
```
:::

:::

## R console: Multiplication {.centering}

<br>

::: columns
::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: multiply
#| eval: false
12 * 4
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: multiply
#| echo: false
#| output: asis
```
:::
:::

## R console: Division {.centering}

<br>

::: columns
::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: division
#| eval: false
25 / 5
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: division
#| echo: false
#| output: asis
```
:::
:::

## R comparison operators

Comparison operators are used to compare two values:

<br>

| Operator | Name                     | Example |
|----------|--------------------------|---------|
| `==`     | Equal                    | x == y  |
| `!=`     | Not equal                | x != y  |
| `>`      | Greater than             | x > y   |
| `<`      | Less than                | x < y   |
| `>=`     | Greater than or equal to | x >= y  |
| `<=`     | Less than or equal to    | x <= y  |


## R console: Logic {.centering}

<br>

::: columns
::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: logic1
#| eval: false
4 == 5
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: logic1
#| echo: false
#| output: asis
```
:::
:::

## R console: Logic {.centering}

<br>

::: columns
::: {.column width="50%"}
### [Code]{.centering}

```{r}
#| label: logic2
#| eval: false
67 > 60
```
:::

::: {.column width="50%"}
### [Output]{.centering}

```{r}
#| label: logic2
#| echo: false
#| output: asis
```
:::
:::

## R console {.centering}

<br>

::: columns
::: {.column width="75%"}
### [Code]{.centering}

```{r}
#| label: calci5
#| eval: false
3434 + 343453 * 2323 / 534 - 1000
```
:::

::: {.column width="25%"}
### [Output]{.centering}

```{r}
#| label: calci5
#| echo: false
#| output: asis
```
:::

<br> 
<br>

::: callout-important
R follows the BODMAS (bracket, order, division, multiplication, addition and subtraction) rule to solve mathematical equations.
:::
:::

## Plot using R

::: panel-tabset
### Code

```{r}
#| label: plot1
#| eval: false
plot(1:100)
```

<br>
<br>

::: {.callout-important}
R Miscellaneous Operators: Miscellaneous operators are used to manipulate data.

|          |                                           |            |
|----------|-------------------------------------------|------------|
| Operator | Description                               | Example    |
| `:`      | Creates a series of numbers in a sequence | x <- 1:10  |

:::

### Output

```{r}
#| label: plot1
#| echo: false
#| output: asis
```
:::

## üòè That's okay but how to$...$

::: nonincremental
-   combine plot, text, tables and images in a single file.

-   publish my work online or convert into a word, pdf or html file.

-   work efficiently with my different projects and save, share and track them.
:::

# {transition="zoom" transition-speed="slow" .centering}

[üî• WE NEED A SUPERHERO üî•]{.r-fit-text}

![](https://media3.giphy.com/media/o6FWop1Gbuyly/giphy.gif?cid=ecf05e474i92dhzes35zr0jtervmdixne1moeehvvtnntmm8&ep=v1_gifs_related&rid=giphy.gif&ct=g){fig-align="center"}

# {.inverse .centering}

![](images/logo-rstd.png){height=150}

[
[s]{.rainbow-orange}
[t]{.rainbow-yellow}
[u]{.rainbow-green}
[d]{.rainbow-indigo}
[i]{.rainbow-red}
[o]{.rainbow-purple}
]{.r-fit-text}

## posit, earlier known as RStudio

<br>

::: columns
::: {.column width="50%"}
-   RStudio is an integrated development environment (IDE) for R and Python.

-   As per posit, RStudio is "the most trusted IDE for open source data science".

-   RStudio 2023.06.0+421 "Mountain Hydrangea" is used to prepare present slides.

- [Download](https://posit.co/download/rstudio-desktop/) RStudio.
:::

::: {.column width="50%"}
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){fig-align="center"} ![](images/posit-logo.svg)
:::
:::

::: aside
Source: [posit](https://posit.co/products/open-source/rstudio/)
:::

## RStudio IDE {.centering}

![](images/rstd_ide.png){.r-stretch}

## RStudio IDE {.centering}

<br>

::: columns
::: {.column width="40%"}
"It includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging, and workspace management."[^2]
:::

::: {.column width="60%"}
![](images/rstd_ide.png)
:::
:::

[^2]: [posit](https://posit.co/products/open-source/rstudio/)

## [RStudio $\rightarrow$ Tools $\rightarrow$ Global Options]{.r-fit-text .centering}

![](images/rstd_options1.png){fig-align="center"}

## [RStudio $\rightarrow$ Tools $\rightarrow$ Global Options]{.r-fit-text .centering}

![](images/rstd_options2.png){fig-align="center"}


## R $\&$ RStudio {.centering}

<br> <br>

::: columns
::: {.column width="50%"}
### Imagine R as a powerful engine$...$

<br>

[{{< fa gear size=7x >}}]{.theme-red}
:::

::: {.column width="50%"}
### $...$and RStudio as a stylish car

<br>

[{{< fa car size=7x >}}]{.theme-blue}
:::
:::

#  {.inverse .centering}

![](images/project-logo.png)

[project]{.r-fit-text}

## Open RStudio {.centering}

![](images/rstd-proj.png)

## RStudio without project {.centering}

![](images/rstd-proj-none.png)

## RStudio without project {.centering}

![](images/rstd-proj-folders.png)

## RStudio projects helps: {background-image="images/r-projects.jpg" background-size="60%" background-position="bottom right"}

::: columns
::: {.column width="100%"}
-   "to divide your work into multiple contexts, each with their own"
    -   working directory,
    -   workspace,
    -   history, and
    -   source documents."
:::
:::

::: aside
Source: [RStudio](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects) & Artwork by [Allison Horst](https://www.allisonhorst.com/)
:::

## 

[‚õ∑Ô∏è Create <br> RStudio Project <br> in 4 Steps ‚õ∑Ô∏è]{.r-fit-text .centering}

## Create RStudio project {.centering}

![](images/rstd_proj1.png)

## Create RStudio project {.centering}

![](images/rstd_proj2.png)

## [In case anything go wrong$...$]{.theme-red} {.centering}

![](images/rstd_proj3.1.png)

## Create RStudio project {.centering}

![](images/rstd_proj3.png)

## Create RStudio project {.centering}

![](images/rstd_proj4.png)

## Create RStudio project {.centering}

![](images/rstd_proj4a.png)

## Create RStudio project {.centering}

![](images/rstd_proj4b.png)

## Create RStudio project {.centering}

![](images/rstd_proj4c.png)

## RStudio project "name" {.centering}

![](images/rstd_proj_name.png)

## RStudio project "path" {.centering}

![](images/rstd_proj_path1.png)

## RStudio project {.centering}

![](images/rstd_proj_path2.png)


# {.inverse .centering}

![](images/code_hero.gif)

::: {aside}
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::

## Write R codes in

::: panel-tabset
### R Console

!["The code input and output are in the R console"](images/code-console.png){fig-align="center" height="550"}

### R script in RStudio

![](images/code-script.png)

### Quarto document in RStudio

![](images/code-quarto.png)
:::

## R script (.R)

> Write codes in the R script $\rightarrow$ Console will show the results.

-   Benefits of writing codes in R script:
    -   You can save it for later use and revision.
    -   You can share with others.
    -   A better track of codes.

## üí° Tips for R script

1.  Writing readable code because other people might need to use your code.

2.  Writing readable code because you might need to use your code, a few weeks/months/years after you've written it.

3.  Put spaces between and around variable names and operators (`=+-*/`)

4.  Break up long lines of code

5.  Keeping a consistent style

::: aside
Source: [Marius Mather](https://bookdown.org/marius_mather/Rad/tips-for-effective-r-programming.html) also [Toma≈æ Ka≈°trun](https://tomaztsql.wordpress.com/2023/01/31/tips-for-organising-your-r-code/)
:::

#  {.inverse}

![](images/rainbowr.gif){fig-align="center"}

[function]{.r-fit-text .centering}

::: {aside}
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::

## R function

-   "A function, in a programming environment, is a set of instructions."

-   "A programmer builds a function to avoid repeating the same task, or reduce complexity."

## R function

::: panel-tabset
### Code

```{r}
#| label: fun-round1
#| eval: false

round(24.3454, 3)
```

<br>

[`round(argument 1, argument 2)`]{.r-fit-text}

### Output

```{r}
#| label: fun-round1
#| echo: false
#| output: asis

```
:::

## Structure of R function {.centering transition="fade"}

<br>

![](images/function_str1.png)

## Structure of R function {.centering transition="fade"}

<br>

![](images/function_str2.png)

## Structure of R function {.centering transition="fade"}

<br>

![](images/function_str3.png)

## Structure of R function {.centering transition="fade"}

<br>

![](images/function_str4.png)

## Structure of R function {.centering transition="fade"}

<br>

![](images/function_str5.png)

<!-- ## Structure of R function {.centering background-image="images/function-args.png" background-size="80%"} -->

## Round function

::: panel-tabset
### Code

Function with default argument.

```{r}
#| label: fun-round2
#| eval: false

round(46.487)
```

### Output

```{r}
#| label: fun-round2
#| echo: false
#| output: asis

```
:::

## Round function

::: panel-tabset
### Code

Function with a specific value of an argument.

```{r}
#| label: fun-round3
#| eval: false

round(46.587, digits = 2)
```

### Output

```{r}
#| label: fun-round3
#| echo: false
#| output: asis

```
:::

## Square root function

::: panel-tabset
### Code

Function with a specific value of an argument.

```{r}
#| label: fun-sqrt
#| eval: false

sqrt(x = 9)
```

### Output

```{r}
#| label: fun-sqrt
#| echo: false
#| output: asis

```
:::

## Sequence function

::: panel-tabset
### Code

Function with a specific value of an argument.

```{r}
#| label: fun-seq
#| eval: false

seq.int(from = 10, to = 30, by = 5)
```

or

```{r}
#| label: fun-seq1
#| eval: false

seq.int(from = 10,
        to = 30,
        by = 5)
```

### Output

```{r}
#| label: fun-seq
#| echo: false
#| output: asis

```
:::

#  {.inverse}

![](images/stormyr.gif){fig-align="center"}

[comment]{.r-fit-text .centering}

::: {aside}
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::

## Comment:

-   "Humans will be able to read the comments, but your computer will pass over them."

-   In R, `#` is used as a commenting symbol.

::: aside
[Source](https://en.wikipedia.org/wiki/Comment_computer_programming)
:::

#  {.inverse}

![](images/pkgs-space.png){fig-align="center"}

[packages]{.r-fit-text}

## R packages {background-image="https://miro.medium.com/v2/resize:fit:732/1*qVn_OyvyHA6AG2gaQkTXfA.png" background-opacity="0.05" background-size="contain" background-position="right"}

-   "An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R."[^3]

[^3]: [Source: R for Data Science, 2e](https://r4ds.hadley.nz/intro)

## R packages {.centering background-image="images/metacran.png" background-size="55%"}

::: aside
Source: [Metacran](https://www.r-pkg.org/)
:::

## Install packages {.centering}

![](images/pkg-download1.png)

## Name of the packages {.centering}

![](images/pkg-download2.png)

## Installed packages {.centering}

![](images/pkg-download3.png)

## Function to install packages

<br>

```{r}
#| eval: false

install.packages("tidyverse")
```

## Function to call package

<br>

```{r}
#| eval: false

library(tidyverse)
```

## Using packages

-   You need to install package only once like:

    -   üìö We buy books once and use them again and again

    -   üí° Fix the bulb once and use it again and again.

## Using packages

-   In every R document you need to **call once** the package using function `library()`, for example library(ggplot2).

-   Once in a while, you need to update the installed packages as well.

-   If you un-install R or RStudio, you will lose all installed packages.

## Tools $\rightarrow$ package updates {.centering}

![](images/update-pkg1.png)

## Select packages to update {.centering}

![](images/update-pkg2.png)

## Click install updates {.centering}

![](images/update-pkg3.png)

## To remove packages {.centering}

![](images/remove-pkg.png)

#  {.inverse}

![](images/heartyr.gif){fig-align="center"}

[objects]{.r-fit-text}

::: {aside}
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::

## R object

> Just a name that you can use to call up stored data.

<br>
<br>

::: {.callout-important}
R assignment operators: Assignment operators are used to assign values to variables.

`my_var <- 3`

`my_var # print my_var`
:::

::: aside
[Source: Garrett Grolemund](https://rstudio-education.github.io/hopr/basics.html#objects)
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: age
#| eval: false
age <- c(23, 25, 16, 40, 34)

age
```

### Output

```{r}
#| label: age
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: income
#| eval: false
income <- c(23000, 25000, 16000, 4000, 34000)

income
```

### Output

```{r}
#| label: income
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: name
#| eval: false
name <- c("Bhim", "Rama", "Sara", "Phule", "Savitri")

name
```

### Output

```{r}
#| label: name
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: place
#| eval: false
place <- c("MH", "RJ", "DL", "HR", "HR")

place
```

### Output

```{r}
#| label: place
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: weight
#| eval: false
weight_kg <- c(50, 52, 61, 40, 70)

weight_kg
```

### Output

```{r}
#| label: weight
#| output: asis
#| echo: false 
```
:::

## üí° Guidelines to name R objects

-   a name cannot start with a number.

-   a name cannot use some special symbols, like `^`, `!`, `$`, `@`, `+`, `-`, `/`, or `*`,`:`.

-   avoid caps.

-   avoid space.

-   use dash (like weight-kg) or underscore (like weight_kg).

-   if chronology matters then add date (2020-09-05-file-name)

## RStudio environment window

![](images/rstd-env.png)

[ü§î How to combine all these objects and form a data set?]{.r-fit-text .fragment .theme-red}

## üëá something like this üòªüòª

<br>

```{r}
#| echo: false

example_df <- data.frame(name, income, age, place, weight_kg)

example_df
```

## How to create a data object?

::: panel-tabset
### Code

```{r}
#| label: df
#| eval: false
example_df <- data.frame(name, income, age, place, weight_kg)

example_df
```

### Output

```{r}
#| label: df
#| output: true
#| echo: false 
```
:::

## Export data set as a `csv` file

::: panel-tabset
### Code

```{r}
#| label: export-csv
#| eval: false

library(readr)

# create a folder in wd & name it "data"
write_csv(example_df, "data/example_df.csv") 
```

### Output

```{r}
#| label: export-csv
#| output: asis
#| echo: false 
```

To see the created file, check the "data" folder in your working directory.
:::

## Your Turn

## List of all objects

::: panel-tabset
### Code

```{r}
#| label: objects-list
#| eval: false

objects()
```

### Output

```{r}
#| label: objects-list
#| output: asis
#| echo: false 
```
:::

#  {.inverse}

![](images/breakr.gif){fig-align="center"}

[community]{.r-fit-text}

::: {aside}
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::

## Using console `>`

### in console type `?your query`

-   for example `?knitr`.

-   for example `?mtcars`.

-   for example `?dplyr`.

## RStudio: package website {.centering}

![](images/help-cran.png)

## [Post community](https://community.rstudio.com/latest) {.centering}

![](images/help-posit.png)

## [Stack Overflow](https://stackoverflow.com/) {.centering}

![](images/help-stack.png)

## [GitHub](https://github.com/) {.centering}

![](images/help-git.png)

## Social Media #RStats {.centering background-image="images/help-tweet.png" background-size="35%"}

## {background-image="images/code_hero.jpg" background-size="contain" background-position="center"}

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

::: {aside}
[Artwork by [Alision Horst](https://allisonhorst.com/)]{.small}
:::